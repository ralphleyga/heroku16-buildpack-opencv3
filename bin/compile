#!/bin/bash

title() {
  echo "-----> $*"
}

subtitle() {
  echo "       $*"
}

shopt -s extglob

if [ $(uname) == Darwin ]; then
    sed() { command sed -l "$@"; }
else
    sed() { command sed -u "$@"; }
fi

# Does some serious copying.
deep-cp() {
  declare source="$1" target="$2"

  mkdir -p "$target"

  # cp doesn't like being called without source params,
  # so make sure they expand to something first.
  # subshell to avoid surprising caller with shopts.
  (
    shopt -s nullglob dotglob
    set -- "$source"/!(tmp|.|..)
    [[ $# == 0 ]] || cp -a "$@" "$target"
  )
}

# Does some serious moving.
deep-mv() {
  deep-cp "$1" "$2"
  deep-rm "$1"
}

# Does some serious deleting.
deep-rm() {
  # subshell to avoid surprising caller with shopts.
  (
    shopt -s dotglob
    rm -rf "$1"/!(tmp|.|..)
  )
}
###################################

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

APP_DIR="/app"
ORIG_BUILD_DIR=$BUILD_DIR
BUILD_DIR=$APP_DIR
cd $BUILD_DIR

# Setup environment
mkdir -p $CACHE_DIR
title "Generating environment"
if [ ! -f $CACHE_DIR/vendor.tar.gz ]; then
	subtitle "Fetching..."
	curl -s -L "https://static.fountain.com/heroku16-buildpack-opencv3.4.1-v4.tar.gz" > $CACHE_DIR/vendor.tar.gz
fi
subtitle "Unpacking..."
tar -xvf $CACHE_DIR/vendor.tar.gz -C $BUILD_DIR

# save ENVs for building Golang binaries
echo "-I$ORIG_BUILD_DIR/.heroku/vendor/include" > $ENV_DIR/CGO_CPPFLAGS
echo "-L$ORIG_BUILD_DIR/.heroku/vendor/lib -lopencv_core -lopencv_face -lopencv_videoio -lopencv_imgproc -lopencv_highgui -lopencv_imgcodecs -lopencv_objdetect -lopencv_features2d -lopencv_video -lopencv_dnn -lopencv_xfeatures2d -lopencv_plot -lopencv_tracking" > $ENV_DIR/CGO_LDFLAGS
echo "--std=c++1z" > $ENV_DIR/CGO_CXXFLAGS

# creating env variables
title "Creating environment variables."
mkdir -p $BUILD_DIR/.profile.d
cat <<EOF >$BUILD_DIR/.profile.d/opencv.sh
export LD_LIBRARY_PATH="\$HOME/.heroku/vendor/lib:\$LD_LIBRARY_PATH"
export PATH="\$HOME/.heroku/vendor/bin:\$PATH"
# export CGO_CPPFLAGS="-I$HOME/.heroku/vendor/include"
# export CGO_LDFLAGS="-L$HOME/.heroku/vendor/lib -lopencv_core -lopencv_face -lopencv_videoio -lopencv_imgproc -lopencv_highgui -lopencv_imgcodecs -lopencv_objdetect -lopencv_features2d -lopencv_video -lopencv_dnn -lopencv_xfeatures2d -lopencv_plot -lopencv_tracking"
# export CGO_CXXFLAGS="--std=c++1z"
EOF

deep-mv $BUILD_DIR/.heroku $ORIG_BUILD_DIR/.heroku
deep-mv $BUILD_DIR/.profile.d $ORIG_BUILD_DIR/.profile.d
